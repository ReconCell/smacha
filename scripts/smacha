#! /usr/bin/env python

import sys
import argparse

import smacha

if __name__ == '__main__':
    # Parse arguments
    arg_parser = argparse.ArgumentParser(description='SMACHA: Jinja-based code templating, ' +
                                                     'generation and scripting for SMACH.')
    
    arg_parser.add_argument('script_file',
                            action='store',
                            help='SMACHA script (yaml file).')
    
    arg_parser.add_argument('-t', '--templates',
                            nargs = '*',
                            dest='template_dirs',
                            action='store',
                            default=[],
                            help='Custom SMACHA template directories (directories containing jinja files).')
    
    arg_parser.add_argument('-o', '--output',
                            dest='output_file',
                            action='store',
                            default='./smacha_output.py',
                            help='Generated SMACH output (python file).')
    
    arg_parser.add_argument('-c', '--comments',
                            action='store_true',
                            default=False,
                            help='Include template header and footer comments in generated code.')
    
    arg_parser.add_argument('-v', '--verbose',
                            action='store_true',
                            default=False,
                            help='Print verbose output to terminal.')
    
    args = arg_parser.parse_args()
    
    # Load parser
    parser = smacha.Parser()
    
    # Load and parse SMACHA script
    with open(args.script_file) as smacha_file:
        smacha_script = parser.parse(smacha_file)
    
    # Load template processor
    templater = smacha.Templater(args.template_dirs, include_comments=args.comments)
    
    # Load code generator
    generator = smacha.Generator(templater, verbose=args.verbose)
    
    # Generate the SMACH code
    smach_code = generator.run(smacha_script)
    
    # Write the final output to a SMACH python file
    with open(args.output_file, 'w') as smach_file:
        smach_file.write(smach_code)
