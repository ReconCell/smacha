#!/usr/bin/env python

import sys
import argparse
import os
import unittest

from smacha.util import Tester

WRITE_OUTPUT_FILES = False
OUTPUT_PY_DIR = '/tmp/smacha/smacha_test_examples/smacha_generated_py'
OUTPUT_YML_DIR = '/tmp/smacha/smacha_test_examples/smacha_generated_scripts'
DEBUG_LEVEL = 1

class TestTools(Tester):
    """Tester class for general unit testing of various SMACHA tool
    functionalities.

    The tests run by this class are performed by generating code using SMACHA
    scripts and templates and comparing the generated output code to the
    expected code from hand-written code samples.

    This includes testing both SMACHA YAML scripts generated by, e.g. the
    :func:`smacha.parser.contain` and :func:`smacha.parser.extract` methods,
    and Python code generated by the :func:`smacha.generator.run` method.
    """

    def __init__(self, *args, **kwargs):
        # Set Tester member variables
        self.set_write_output_files(WRITE_OUTPUT_FILES)
        self.set_output_py_dir(OUTPUT_PY_DIR)
        self.set_output_yml_dir(OUTPUT_YML_DIR)
        self.set_debug_level(DEBUG_LEVEL)

        # Store the base path
        self._base_path = os.path.dirname(os.path.abspath(__file__))

        # Call the parent constructor
        super(TestTools, self).__init__(*args,
                                        script_dirs=[os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples')],
                                        template_dirs=[os.path.join(self._base_path, 'smacha_templates/smacha_test_examples')],
                                        **kwargs)

    def test_generate_hard_coded_params(self):
        """Test generating hard_coded_params.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/params.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/hard_coded_params.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_assigned_params(self):
        """Test generating assigned_params.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/params.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/assigned_params.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_nesting_params(self):
        """Test generating nesting_params.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/nesting_params.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/nesting_params.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_nesting_params_with_sub_script(self):
        """Test generating nesting_params_with_sub_script.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/nesting_params.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/nesting_params_with_sub_script.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_seq_nesting_1(self):
        """Test generating seq_nesting_1.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/seq_nesting_1.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_1.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_seq_nesting_2(self):
        """Test generating seq_nesting_2.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/seq_nesting_2.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_2.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_seq_nesting_3(self):
        """Test generating seq_nesting_3.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/seq_nesting_3.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_3.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_containerize_seq_1(self):
        """Test containerizing states FOO_0 and FOO_1 from seq.yml"""
        with open(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_1.yml')) as original_file:
            generated_code = self._contain(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq.yml'),
                                           'SUB', 'StateMachine', ['FOO_0', 'FOO_1'],
                                           output_file = 'seq_nesting_1_contain_output.yml')
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_containerize_seq_2(self):
        """Test containerizing states FOO_1 and FOO_2 from seq.yml"""
        with open(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_2.yml')) as original_file:
            generated_code = self._contain(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq.yml'),
                                           'SUB', 'StateMachine', ['FOO_1', 'FOO_2'],
                                           output_file = 'seq_nesting_2_contain_output.yml')
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_containerize_seq_3(self):
        """Test containerizing states FOO0, FOO_1 and FOO_2 from seq.yml"""
        with open(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_3.yml')) as original_file:
            generated_code = self._contain(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq.yml'),
                                           'SUB', 'StateMachine', ['FOO_0', 'FOO_1', 'FOO_2'],
                                           output_file = 'seq_nesting_3_contain_output.yml')
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_extract_seq_nesting_1(self):
        """Test extracting container state as sub-script from seq_nesting_1.yml"""
        with open(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_1_sub_script.yml')) as original_sub_script_file, open(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_1_super_script.yml')) as original_super_script_file:
            generated_sub_script_code, generated_super_script_code = (
                self._extract(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_1.yml'),
                              'SUB', '/smacha_scripts/seq_nesting_1_sub_script.yml'))
            original_sub_script_code = original_sub_script_file.read()
            original_super_script_code = original_super_script_file.read()
            self.assertTrue(
                self._compare(generated_sub_script_code, original_sub_script_code, file_a='generated', file_b='original') and
                self._compare(generated_super_script_code, original_super_script_code, file_a='generated', file_b='original'))

    def test_extract_seq_nesting_2(self):
        """Test extracting container state as sub-script from seq_nesting_2.yml"""
        with open(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_2_sub_script.yml')) as original_sub_script_file, open(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_2_super_script.yml')) as original_super_script_file:
            generated_sub_script_code, generated_super_script_code = (
                self._extract(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_2.yml'),
                              'SUB', '/smacha_scripts/seq_nesting_2_sub_script.yml'))
            original_sub_script_code = original_sub_script_file.read()
            original_super_script_code = original_super_script_file.read()
            self.assertTrue(
                self._compare(generated_sub_script_code, original_sub_script_code, file_a='generated', file_b='original') and
                self._compare(generated_super_script_code, original_super_script_code, file_a='generated', file_b='original'))

    def test_extract_seq_nesting_3(self):
        """Test extracting container state as sub-script from seq_nesting_3.yml"""
        with open(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_3_sub_script.yml')) as original_sub_script_file, open(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_3_super_script.yml')) as original_super_script_file:
            generated_sub_script_code, generated_super_script_code = (
                self._extract(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_3.yml'),
                              'SUB', '/smacha_scripts/seq_nesting_3_sub_script.yml'))
            original_sub_script_code = original_sub_script_file.read()
            original_super_script_code = original_super_script_file.read()
            self.assertTrue(
                self._compare(generated_sub_script_code, original_sub_script_code, file_a='generated', file_b='original') and
                self._compare(generated_super_script_code, original_super_script_code, file_a='generated', file_b='original'))

    def test_generate_seq_concurrence_1(self):
        """Test generating seq_concurrence_1.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/seq_concurrence_1.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_concurrence_1.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_seq_concurrence_2(self):
        """Test generating seq_concurrence_2.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/seq_concurrence_2.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_concurrence_2.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_seq_concurrence_3(self):
        """Test generating seq_concurrence_3.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/seq_concurrence_3.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_concurrence_3.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_concurrence_containerize_seq_1(self):
        """Test concurrence containerizing states FOO_0 and FOO_1 from seq.yml"""
        with open(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_concurrence_1.yml')) as original_file:
            generated_code = self._contain(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq.yml'),
                                           'CON', 'Concurrence', ['FOO_0', 'FOO_1'],
                                           output_file = 'seq_concurrence_1_contain_output.yml')
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_concurrence_containerize_seq_2(self):
        """Test concurrence containerizing  states FOO_1 and FOO_2 from seq.yml"""
        with open(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_concurrence_2.yml')) as original_file:
            generated_code = self._contain(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq.yml'),
                                           'CON', 'Concurrence', ['FOO_1', 'FOO_2'],
                                           output_file = 'seq_concurrence_2_contain_output.yml')
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_concurrence_containerize_seq_3(self):
        """Test concurrence containerizing states FOO_0, FOO_1 and FOO_2 from seq.yml"""
        with open(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_concurrence_3.yml')) as original_file:
            generated_code = self._contain(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq.yml'),
                                           'CON', 'Concurrence', ['FOO_0', 'FOO_1', 'FOO_2'],
                                           output_file = 'seq_concurrence_3_contain_output.yml')
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_callbacks(self):
        """Test generate callbacks.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/callbacks.py')) as original_file:
            generated_code = self._strip_uuids(self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/callbacks.yml')))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_random_outcomes(self):
        """Test generate random_outcomes.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/random_outcomes.py')) as original_file:
            generated_code = self._strip_uuids(self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/random_outcomes.yml')))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_sleep(self):
        """Test generate sleep.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/sleep.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/sleep.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_print_userdata(self):
        """Test print_userdata.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/print_userdata.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/print_userdata.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_seq_nesting_1_super_script_2(self):
        """Test generate seq_nesting_1_super_script_2.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/seq_nesting_1_super_script_2.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_1_super_script_2.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_nesting_params_shorthand(self):
        """Test generate nesting_params_shorthand.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/nesting_params.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/nesting_params_shorthand.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_assigned_params_shorthand(self):
        """Test generate assigned_params_shorthand.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/params.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/assigned_params_shorthand.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_print_userdata_shorthand(self):
        """Test generate print_userdata_shorthand.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/print_userdata.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/print_userdata_shorthand.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_callbacks_shorthand(self):
        """Test generate callbacks_shorthand.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/callbacks.py')) as original_file:
            generated_code = self._strip_uuids(self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/callbacks_shorthand.yml')))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_seq_nesting_1_super_script_2_shorthand(self):
        """Test generate seq_nesting_1_super_script_2_shorthand.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/seq_nesting_1_super_script_2.py')) as original_file:
            generated_code = self._strip_uuids(self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_1_super_script_2_shorthand.yml')))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_seq_nesting_1_shorthand(self):
        """Test generate seq_nesting_1_shorthand.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/seq_nesting_1.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_1_shorthand.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_seq_nesting_2_shorthand(self):
        """Test generate seq_nesting_2_shorthand.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/seq_nesting_2.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_2_shorthand.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_seq_nesting_3_shorthand(self):
        """Test generate seq_nesting_3_shorthand.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/seq_nesting_3.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_nesting_3_shorthand.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_seq_concurrence_1_shorthand(self):
        """Test generate seq_concurrence_1_shorthand.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/seq_concurrence_1.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_concurrence_1_shorthand.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_seq_concurrence_2_shorthand(self):
        """Test generate seq_concurrence_2_shorthand.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/seq_concurrence_2.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_concurrence_2_shorthand.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_seq_concurrence_3_shorthand(self):
        """Test generate seq_concurrence_3_shorthand.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/seq_concurrence_3.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/seq_concurrence_3_shorthand.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_rosbag_recording_1(self):
        """Test generate rosbag_recording_1.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/rosbag_recording_1.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/rosbag_recording_1.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

    def test_generate_rosbag_recording_2(self):
        """Test generate rosbag_recording_2.yml"""
        with open(os.path.join(self._base_path, 'smacha_test_examples/rosbag_recording_2.py')) as original_file:
            generated_code = self._generate(os.path.join(self._base_path, 'smacha_scripts/smacha_test_examples/rosbag_recording_2.yml'))
            original_code = original_file.read()
            self.assertTrue(self._compare(generated_code, original_code, file_a='generated', file_b='original'))

if __name__=="__main__":
    # Parse arguments
    arg_parser = argparse.ArgumentParser(description='SMACHA test examples unit tests.')

    arg_parser.add_argument('-w', '--write',
                            action='store_true',
                            default=WRITE_OUTPUT_FILES,
                            help='Write generated output files to disk.')

    arg_parser.add_argument('-op', '--output-py-dir',
                            dest='output_py_dir',
                            default=OUTPUT_PY_DIR,
                            action='store',
                            help='Specify output SMACH Python executable directory.')

    arg_parser.add_argument('-oy', '--output-yml-dir',
                            dest='output_yml_dir',
                            default=OUTPUT_YML_DIR,
                            action='store',
                            help='Specify output SMACHA YAML script directory.')

    arg_parser.add_argument('-d', '--debug-level',
                            dest='debug_level',
                            action='store',
                            default=DEBUG_LEVEL,
                            help='Set debug level (0-2. Default: 1)')

    # Some trickery to avoid disrupting unittest with args
    if len(sys.argv) > 1:
        argv = sys.argv[1:]
        sys.argv = sys.argv[:1]
        args = arg_parser.parse_args(argv)
        WRITE_OUTPUT_FILES = args.write
        OUTPUT_PY_DIR = args.output_py_dir
        OUTPUT_YML_DIR = args.output_yml_dir
        DEBUG_LEVEL = int(args.debug_level)

    unittest.main()
