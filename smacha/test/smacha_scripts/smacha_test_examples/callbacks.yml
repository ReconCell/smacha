--- # SMACHA callbacks example
name: sm
template: Base
manifest: smacha
node_name: smacha_callbacks_test
outcomes: [final_outcome]
userdata: {animals: [cats, dogs, sharks], numbers: [1, 2, 3]}
states:
  - FOO_0:
      template: CallbacksFoo
      input_keys: [animals]
      output_keys: [animals]
      callbacks: {animals: foo_animals_cb}
      transitions: {succeeded: FOO_1}
  - FOO_1:
      template: CallbacksFoo
      input_keys: [animals]
      output_keys: [animals]
      callbacks: {animals: "`lambda ud: ud.animals if ud.animals.append('ducks') else ud.animals`"}
      transitions: {succeeded: FOO_2}
  - FOO_2:
      template: CallbacksFoo
      input_keys: [numbers]
      output_keys: [numbers]
      callbacks: {numbers: foo_numbers_cb}
      transitions: {succeeded: FOO_3}
  - FOO_3:
      template: CallbacksFoo
      input_keys: [numbers]
      output_keys: [numbers]
      callbacks: {numbers: "`lambda ud: ud.numbers if ud.numbers.append(ud.numbers[-1]+1) else ud.numbers`"}
      transitions: {succeeded: FOO_4}
  - FOO_4:
      template: CallbacksFoo
      input_keys: [animals, numbers]
      output_keys: [animals, numbers]
      callbacks:
        animals: foo_animals_cb
        numbers: "`lambda ud: ud.numbers if ud.numbers.append(ud.numbers[-1]+1) else ud.numbers`"
      transitions: {succeeded: FOO_5}
  - FOO_5:
      template: CallbacksFoo
      input_keys: [animals, numbers]
      output_keys: [animals, numbers]
      callbacks:
        animals: "`lambda ud: ud.animals if ud.animals.append('ducks') else ud.animals`"
        numbers: foo_numbers_cb
      transitions: {succeeded: FOO_6}
  - FOO_6:
      template: CallbacksFoo
      output_keys: [random_number]
      callbacks:
        random_number: "`lambda ud: random.random()`"
      transitions: {succeeded: FOO_7}
  - FOO_7:
      template: CallbacksFoo
      input_keys: [numbers,random_number]
      output_keys: [numbers]
      callbacks: {numbers: "`lambda ud: ud.numbers if ud.numbers.append(ud.random_number) else ud.numbers`"}
      transitions: {succeeded: final_outcome}
