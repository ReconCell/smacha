{% block base_header %}
# define state Bar
class Bar(smach.State):
    def __init__(self):
        smach.State.__init__(self, 
                             outcomes=['outcome1']{% if remapping is defined %},
                             input_keys=['bar_counter_in']{% endif %})
        
    def execute(self, userdata):
        rospy.loginfo('Executing state {{ name }}'){% if remapping is defined %}
        rospy.loginfo('Counter = %f'%userdata.bar_counter_in){% endif %} 
        return 'outcome1'
{% endblock base_header %}

{% block body %}
smach.{{ parent_type }}.add('{{ name }}', Bar(){% if transitions is defined %}, 
                       transitions={{ '{' }}{% for outcome, transition in transitions.items() | sort %}'{{ outcome }}':'{{ transition }}'{% if not loop.last %},
                                    {% endif %}{% endfor %}{{ '}' }}{% endif %}{% if remapping is defined %},
                       remapping={{ '{' }}{% for state_key, userdata_key in remapping.items() | sort %}'{{ state_key }}':'{{ userdata_key }}'{% if not loop.last %},
                                  {% endif %}{% endfor %}{{ '}' }}{% endif %})
{% endblock body %}

{% block base_footer %}
{% endblock base_footer %}
